// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "circuits",
    columns: [
      { name: "ref", type: "string" },
      { name: "name", type: "string" },
      { name: "location", type: "string" },
      { name: "country", type: "string" },
      { name: "lat", type: "float" },
      { name: "lng", type: "float" },
      { name: "url", type: "string" },
      { name: "alt", type: "int" },
    ],
  },
  {
    name: "constructors",
    columns: [
      { name: "ref", type: "string" },
      { name: "name", type: "string" },
      { name: "nationality", type: "string" },
      { name: "url", type: "string" },
    ],
  },
  {
    name: "drivers",
    columns: [
      { name: "ref", type: "string" },
      { name: "number", type: "int" },
      { name: "code", type: "string" },
      { name: "forename", type: "string" },
      { name: "surname", type: "string" },
      { name: "dob", type: "datetime" },
      { name: "nationality", type: "string" },
      { name: "url", type: "string", notNull: true },
    ],
  },
  { name: "seasons", columns: [{ name: "url", type: "string" }] },
  { name: "status", columns: [{ name: "status", type: "string" }] },
  {
    name: "races",
    columns: [
      { name: "year", type: "link", link: { table: "seasons" } },
      { name: "round", type: "int" },
      { name: "circuit", type: "link", link: { table: "circuits" } },
      { name: "name", type: "string" },
      { name: "startTime", type: "datetime" },
      { name: "url", type: "string" },
      { name: "fp1", type: "datetime" },
      { name: "fp2", type: "datetime" },
      { name: "fp3", type: "datetime" },
      { name: "quali", type: "datetime" },
      { name: "sprint", type: "datetime" },
    ],
  },
  {
    name: "qualifying",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "constructor", type: "link", link: { table: "constructors" } },
      { name: "number", type: "int" },
      { name: "position", type: "int" },
      { name: "q1", type: "string" },
      { name: "q2", type: "string" },
      { name: "q3", type: "string" },
    ],
  },
  {
    name: "pitStops",
    columns: [
      { name: "stop", type: "int" },
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "lap", type: "int" },
      { name: "time", type: "datetime" },
      { name: "duration", type: "string" },
      { name: "milliseconds", type: "float" },
    ],
  },
  {
    name: "constructorStandings",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "constructor", type: "link", link: { table: "constructors" } },
      { name: "points", type: "float" },
      { name: "position", type: "int" },
      { name: "positionText", type: "string" },
      { name: "wins", type: "int" },
    ],
  },
  {
    name: "constructorResults",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "constructor", type: "link", link: { table: "constructors" } },
      { name: "points", type: "float" },
      { name: "status", type: "string" },
    ],
  },
  {
    name: "lapTimes",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "lap", type: "int" },
      { name: "position", type: "int" },
      { name: "duration", type: "string" },
      { name: "milliseconds", type: "float" },
    ],
  },
  {
    name: "driverStandings",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "points", type: "float" },
      { name: "position", type: "int" },
      { name: "positionText", type: "string" },
      { name: "wins", type: "int" },
    ],
  },
  {
    name: "results",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "constructor", type: "link", link: { table: "constructors" } },
      { name: "number", type: "int" },
      { name: "grid", type: "int" },
      { name: "position", type: "int" },
      { name: "positionText", type: "string" },
      { name: "positionOrder", type: "int" },
      { name: "points", type: "float" },
      { name: "laps", type: "int" },
      { name: "duration", type: "string" },
      { name: "milliseconds", type: "float" },
      { name: "fastestLap", type: "int" },
      { name: "rank", type: "int" },
      { name: "fastestLapTime", type: "string" },
      { name: "fastestLapSpeed", type: "string" },
      { name: "status", type: "link", link: { table: "status" } },
    ],
  },
  {
    name: "sprintResults",
    columns: [
      { name: "race", type: "link", link: { table: "races" } },
      { name: "driver", type: "link", link: { table: "drivers" } },
      { name: "constructor", type: "link", link: { table: "constructors" } },
      { name: "number", type: "int" },
      { name: "grid", type: "int" },
      { name: "position", type: "int" },
      { name: "positionText", type: "string" },
      { name: "positionOrder", type: "int" },
      { name: "points", type: "float" },
      { name: "laps", type: "int" },
      { name: "duration", type: "string" },
      { name: "milliseconds", type: "float" },
      { name: "fastestLap", type: "int" },
      { name: "fastestLapTime", type: "string" },
      { name: "status", type: "link", link: { table: "status" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Circuits = InferredTypes["circuits"];
export type CircuitsRecord = Circuits & XataRecord;

export type Constructors = InferredTypes["constructors"];
export type ConstructorsRecord = Constructors & XataRecord;

export type Drivers = InferredTypes["drivers"];
export type DriversRecord = Drivers & XataRecord;

export type Seasons = InferredTypes["seasons"];
export type SeasonsRecord = Seasons & XataRecord;

export type Status = InferredTypes["status"];
export type StatusRecord = Status & XataRecord;

export type Races = InferredTypes["races"];
export type RacesRecord = Races & XataRecord;

export type Qualifying = InferredTypes["qualifying"];
export type QualifyingRecord = Qualifying & XataRecord;

export type PitStops = InferredTypes["pitStops"];
export type PitStopsRecord = PitStops & XataRecord;

export type ConstructorStandings = InferredTypes["constructorStandings"];
export type ConstructorStandingsRecord = ConstructorStandings & XataRecord;

export type ConstructorResults = InferredTypes["constructorResults"];
export type ConstructorResultsRecord = ConstructorResults & XataRecord;

export type LapTimes = InferredTypes["lapTimes"];
export type LapTimesRecord = LapTimes & XataRecord;

export type DriverStandings = InferredTypes["driverStandings"];
export type DriverStandingsRecord = DriverStandings & XataRecord;

export type Results = InferredTypes["results"];
export type ResultsRecord = Results & XataRecord;

export type SprintResults = InferredTypes["sprintResults"];
export type SprintResultsRecord = SprintResults & XataRecord;

export type DatabaseSchema = {
  circuits: CircuitsRecord;
  constructors: ConstructorsRecord;
  drivers: DriversRecord;
  seasons: SeasonsRecord;
  status: StatusRecord;
  races: RacesRecord;
  qualifying: QualifyingRecord;
  pitStops: PitStopsRecord;
  constructorStandings: ConstructorStandingsRecord;
  constructorResults: ConstructorResultsRecord;
  lapTimes: LapTimesRecord;
  driverStandings: DriverStandingsRecord;
  results: ResultsRecord;
  sprintResults: SprintResultsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://sample-databases-v0sn1n.eu-west-1.xata.sh/db/f1",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
